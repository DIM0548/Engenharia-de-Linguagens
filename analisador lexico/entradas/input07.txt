// while a do 
//  begin 
//    x := 2 
//  end
function mergeSort(arr: int[]): int[] {
  if (arr.size > 0) {
    mid: int      = arr.size / 2;
    left: int[]   = arr.left(mid);
    right: int[]  = arr.right(mid);

    mergeSort(left);
    mergeSort(right);
    return merge(left, right);
  } else {
    return arr;
  }
}

function merge(left: int[], right: int[]): int[] {
  i: int = 0;
  j: int = 0;
  k: int = 0;
  arrR: int[] = new int[left.size + right.size];

  while (i < left.size && j < right.size) {
    if (left[i] <= right[j]) {
      arrR[k] = left[i];
      i++;
    } else {
      arrR[k] = right[j];
      j++;
    }
    k++;
  }
  while (i < left.size) {
    arrR[k] = left[i];
    i++;
    k++;
  }
  while (j < right.size) {
    arrR[k] = right[j];
    j++;
    k++;
  }
  return arrR;
}