Terminals unused in grammar

    RETURN
    DOT
    GT
    LT
    GTEQ
    LTEQ
    EQ
    AND
    OR
    INCREMENT
    DECREMENT


Grammar

    0 $accept: program $end

    1 program: stmlist

    2 stmlist: stm
    3        | stm stmlist

    4 stm: func_decl
    5    | varlist ASSIGNMENT expr SEMICOLON
    6    | decl SEMICOLON
    7    | expr SEMICOLON
    8    | WHILE LCBRACKET stmlist RCBRACKET
    9    | IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET
   10    | IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

   11 varlist: ID
   12        | varlist COMMA ID
   13        | varlist COMMA ID LBRACKET RBRACKET
   14        | varlist COMMA ID LBRACKET RBRACKET LBRACKET RBRACKET
   15        | ID LBRACKET RBRACKET
   16        | ID LBRACKET RBRACKET LBRACKET RBRACKET

   17 decl: varlist COLON type

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON type LCBRACKET stmlist RCBRACKET

   19 param_list: ε
   20           | param
   21           | param COMMA param_list

   22 param: ID COLON type

   23 type: INTEGER
   24     | INTEGER LBRACKET RBRACKET

   25 expr: ID
   26     | NUMBER
   27     | expr PLUS expr
   28     | expr MINUS expr
   29     | expr MULTIPLY expr
   30     | expr SLASH expr
   31     | LPAREN expr RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUMBER <sValue> (258) 26
    ID <sValue> (259) 11 12 13 14 15 16 18 22 25
    INTEGER <sValue> (260) 23 24
    LCBRACKET (261) 8 9 10 18
    RCBRACKET (262) 8 9 10 18
    LPAREN (263) 9 10 18 31
    RPAREN (264) 9 10 18 31
    LBRACKET (265) 13 14 15 16 24
    RBRACKET (266) 13 14 15 16 24
    IF (267) 9 10
    ELSE (268) 10
    WHILE (269) 8
    FUNCTION (270) 18
    RETURN (271)
    DOT (272)
    COMMA (273) 12 13 14 21
    COLON (274) 17 18 22
    SEMICOLON (275) 5 6 7
    ASSIGNMENT (276) 5
    GT (277)
    LT (278)
    GTEQ (279)
    LTEQ (280)
    EQ (281)
    AND (282)
    OR (283)
    PLUS (284) 27
    MINUS (285) 28
    SLASH (286) 30
    INCREMENT (287)
    DECREMENT (288)
    MULTIPLY (289) 29


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1
        on right: 0
    stmlist (37)
        on left: 2 3
        on right: 1 3 8 9 10 18
    stm (38)
        on left: 4 5 6 7 8 9 10
        on right: 2 3
    varlist <sValue> (39)
        on left: 11 12 13 14 15 16
        on right: 5 12 13 14 17
    decl <sValue> (40)
        on left: 17
        on right: 6
    func_decl (41)
        on left: 18
        on right: 4
    param_list (42)
        on left: 19 20 21
        on right: 18 21
    param <sValue> (43)
        on left: 22
        on right: 20 21
    type <sValue> (44)
        on left: 23 24
        on right: 17 18 22
    expr <sValue> (45)
        on left: 25 26 27 28 29 30 31
        on right: 5 7 9 10 27 28 29 30 31


State 0

    0 $accept: • program $end

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    program    go to state 7
    stmlist    go to state 8
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 1

   26 expr: NUMBER •

    $default  reduce using rule 26 (expr)


State 2

   11 varlist: ID •
   15        | ID • LBRACKET RBRACKET
   16        | ID • LBRACKET RBRACKET LBRACKET RBRACKET
   25 expr: ID •

    LBRACKET  shift, and go to state 14

    COMMA       reduce using rule 11 (varlist)
    COLON       reduce using rule 11 (varlist)
    ASSIGNMENT  reduce using rule 11 (varlist)
    $default    reduce using rule 25 (expr)


State 3

   31 expr: LPAREN • expr RPAREN

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 16


State 4

    9 stm: IF • LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET
   10    | IF • LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

    LPAREN  shift, and go to state 17


State 5

    8 stm: WHILE • LCBRACKET stmlist RCBRACKET

    LCBRACKET  shift, and go to state 18


State 6

   18 func_decl: FUNCTION • ID LPAREN param_list RPAREN COLON type LCBRACKET stmlist RCBRACKET

    ID  shift, and go to state 19


State 7

    0 $accept: program • $end

    $end  shift, and go to state 20


State 8

    1 program: stmlist •

    $default  reduce using rule 1 (program)


State 9

    2 stmlist: stm •
    3        | stm • stmlist

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    $default  reduce using rule 2 (stmlist)

    stmlist    go to state 21
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 10

    5 stm: varlist • ASSIGNMENT expr SEMICOLON
   12 varlist: varlist • COMMA ID
   13        | varlist • COMMA ID LBRACKET RBRACKET
   14        | varlist • COMMA ID LBRACKET RBRACKET LBRACKET RBRACKET
   17 decl: varlist • COLON type

    COMMA       shift, and go to state 22
    COLON       shift, and go to state 23
    ASSIGNMENT  shift, and go to state 24


State 11

    6 stm: decl • SEMICOLON

    SEMICOLON  shift, and go to state 25


State 12

    4 stm: func_decl •

    $default  reduce using rule 4 (stm)


State 13

    7 stm: expr • SEMICOLON
   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr

    SEMICOLON  shift, and go to state 26
    PLUS       shift, and go to state 27
    MINUS      shift, and go to state 28
    SLASH      shift, and go to state 29
    MULTIPLY   shift, and go to state 30


State 14

   15 varlist: ID LBRACKET • RBRACKET
   16        | ID LBRACKET • RBRACKET LBRACKET RBRACKET

    RBRACKET  shift, and go to state 31


State 15

   25 expr: ID •

    $default  reduce using rule 25 (expr)


State 16

   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr
   31     | LPAREN expr • RPAREN

    RPAREN    shift, and go to state 32
    PLUS      shift, and go to state 27
    MINUS     shift, and go to state 28
    SLASH     shift, and go to state 29
    MULTIPLY  shift, and go to state 30


State 17

    9 stm: IF LPAREN • expr RPAREN LCBRACKET stmlist RCBRACKET
   10    | IF LPAREN • expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 33


State 18

    8 stm: WHILE LCBRACKET • stmlist RCBRACKET

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    stmlist    go to state 34
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 19

   18 func_decl: FUNCTION ID • LPAREN param_list RPAREN COLON type LCBRACKET stmlist RCBRACKET

    LPAREN  shift, and go to state 35


State 20

    0 $accept: program $end •

    $default  accept


State 21

    3 stmlist: stm stmlist •

    $default  reduce using rule 3 (stmlist)


State 22

   12 varlist: varlist COMMA • ID
   13        | varlist COMMA • ID LBRACKET RBRACKET
   14        | varlist COMMA • ID LBRACKET RBRACKET LBRACKET RBRACKET

    ID  shift, and go to state 36


State 23

   17 decl: varlist COLON • type

    INTEGER  shift, and go to state 37

    type  go to state 38


State 24

    5 stm: varlist ASSIGNMENT • expr SEMICOLON

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 39


State 25

    6 stm: decl SEMICOLON •

    $default  reduce using rule 6 (stm)


State 26

    7 stm: expr SEMICOLON •

    $default  reduce using rule 7 (stm)


State 27

   27 expr: expr PLUS • expr

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 40


State 28

   28 expr: expr MINUS • expr

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 41


State 29

   30 expr: expr SLASH • expr

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 42


State 30

   29 expr: expr MULTIPLY • expr

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 15
    LPAREN  shift, and go to state 3

    expr  go to state 43


State 31

   15 varlist: ID LBRACKET RBRACKET •
   16        | ID LBRACKET RBRACKET • LBRACKET RBRACKET

    LBRACKET  shift, and go to state 44

    $default  reduce using rule 15 (varlist)


State 32

   31 expr: LPAREN expr RPAREN •

    $default  reduce using rule 31 (expr)


State 33

    9 stm: IF LPAREN expr • RPAREN LCBRACKET stmlist RCBRACKET
   10    | IF LPAREN expr • RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET
   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr

    RPAREN    shift, and go to state 45
    PLUS      shift, and go to state 27
    MINUS     shift, and go to state 28
    SLASH     shift, and go to state 29
    MULTIPLY  shift, and go to state 30


State 34

    8 stm: WHILE LCBRACKET stmlist • RCBRACKET

    RCBRACKET  shift, and go to state 46


State 35

   18 func_decl: FUNCTION ID LPAREN • param_list RPAREN COLON type LCBRACKET stmlist RCBRACKET

    ID  shift, and go to state 47

    $default  reduce using rule 19 (param_list)

    param_list  go to state 48
    param       go to state 49


State 36

   12 varlist: varlist COMMA ID •
   13        | varlist COMMA ID • LBRACKET RBRACKET
   14        | varlist COMMA ID • LBRACKET RBRACKET LBRACKET RBRACKET

    LBRACKET  shift, and go to state 50

    $default  reduce using rule 12 (varlist)


State 37

   23 type: INTEGER •
   24     | INTEGER • LBRACKET RBRACKET

    LBRACKET  shift, and go to state 51

    $default  reduce using rule 23 (type)


State 38

   17 decl: varlist COLON type •

    $default  reduce using rule 17 (decl)


State 39

    5 stm: varlist ASSIGNMENT expr • SEMICOLON
   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr

    SEMICOLON  shift, and go to state 52
    PLUS       shift, and go to state 27
    MINUS      shift, and go to state 28
    SLASH      shift, and go to state 29
    MULTIPLY   shift, and go to state 30


State 40

   27 expr: expr • PLUS expr
   27     | expr PLUS expr •
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr

    SLASH     shift, and go to state 29
    MULTIPLY  shift, and go to state 30

    $default  reduce using rule 27 (expr)


State 41

   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   28     | expr MINUS expr •
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr

    SLASH     shift, and go to state 29
    MULTIPLY  shift, and go to state 30

    $default  reduce using rule 28 (expr)


State 42

   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   30     | expr • SLASH expr
   30     | expr SLASH expr •

    MULTIPLY  shift, and go to state 30

    $default  reduce using rule 30 (expr)


State 43

   27 expr: expr • PLUS expr
   28     | expr • MINUS expr
   29     | expr • MULTIPLY expr
   29     | expr MULTIPLY expr •
   30     | expr • SLASH expr

    $default  reduce using rule 29 (expr)


State 44

   16 varlist: ID LBRACKET RBRACKET LBRACKET • RBRACKET

    RBRACKET  shift, and go to state 53


State 45

    9 stm: IF LPAREN expr RPAREN • LCBRACKET stmlist RCBRACKET
   10    | IF LPAREN expr RPAREN • LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

    LCBRACKET  shift, and go to state 54


State 46

    8 stm: WHILE LCBRACKET stmlist RCBRACKET •

    $default  reduce using rule 8 (stm)


State 47

   22 param: ID • COLON type

    COLON  shift, and go to state 55


State 48

   18 func_decl: FUNCTION ID LPAREN param_list • RPAREN COLON type LCBRACKET stmlist RCBRACKET

    RPAREN  shift, and go to state 56


State 49

   20 param_list: param •
   21           | param • COMMA param_list

    COMMA  shift, and go to state 57

    $default  reduce using rule 20 (param_list)


State 50

   13 varlist: varlist COMMA ID LBRACKET • RBRACKET
   14        | varlist COMMA ID LBRACKET • RBRACKET LBRACKET RBRACKET

    RBRACKET  shift, and go to state 58


State 51

   24 type: INTEGER LBRACKET • RBRACKET

    RBRACKET  shift, and go to state 59


State 52

    5 stm: varlist ASSIGNMENT expr SEMICOLON •

    $default  reduce using rule 5 (stm)


State 53

   16 varlist: ID LBRACKET RBRACKET LBRACKET RBRACKET •

    $default  reduce using rule 16 (varlist)


State 54

    9 stm: IF LPAREN expr RPAREN LCBRACKET • stmlist RCBRACKET
   10    | IF LPAREN expr RPAREN LCBRACKET • stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    stmlist    go to state 60
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 55

   22 param: ID COLON • type

    INTEGER  shift, and go to state 37

    type  go to state 61


State 56

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN • COLON type LCBRACKET stmlist RCBRACKET

    COLON  shift, and go to state 62


State 57

   21 param_list: param COMMA • param_list

    ID  shift, and go to state 47

    $default  reduce using rule 19 (param_list)

    param_list  go to state 63
    param       go to state 49


State 58

   13 varlist: varlist COMMA ID LBRACKET RBRACKET •
   14        | varlist COMMA ID LBRACKET RBRACKET • LBRACKET RBRACKET

    LBRACKET  shift, and go to state 64

    $default  reduce using rule 13 (varlist)


State 59

   24 type: INTEGER LBRACKET RBRACKET •

    $default  reduce using rule 24 (type)


State 60

    9 stm: IF LPAREN expr RPAREN LCBRACKET stmlist • RCBRACKET
   10    | IF LPAREN expr RPAREN LCBRACKET stmlist • RCBRACKET ELSE LCBRACKET stmlist RCBRACKET

    RCBRACKET  shift, and go to state 65


State 61

   22 param: ID COLON type •

    $default  reduce using rule 22 (param)


State 62

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON • type LCBRACKET stmlist RCBRACKET

    INTEGER  shift, and go to state 37

    type  go to state 66


State 63

   21 param_list: param COMMA param_list •

    $default  reduce using rule 21 (param_list)


State 64

   14 varlist: varlist COMMA ID LBRACKET RBRACKET LBRACKET • RBRACKET

    RBRACKET  shift, and go to state 67


State 65

    9 stm: IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET •
   10    | IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET • ELSE LCBRACKET stmlist RCBRACKET

    ELSE  shift, and go to state 68

    $default  reduce using rule 9 (stm)


State 66

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON type • LCBRACKET stmlist RCBRACKET

    LCBRACKET  shift, and go to state 69


State 67

   14 varlist: varlist COMMA ID LBRACKET RBRACKET LBRACKET RBRACKET •

    $default  reduce using rule 14 (varlist)


State 68

   10 stm: IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE • LCBRACKET stmlist RCBRACKET

    LCBRACKET  shift, and go to state 70


State 69

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON type LCBRACKET • stmlist RCBRACKET

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    stmlist    go to state 71
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 70

   10 stm: IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET • stmlist RCBRACKET

    NUMBER    shift, and go to state 1
    ID        shift, and go to state 2
    LPAREN    shift, and go to state 3
    IF        shift, and go to state 4
    WHILE     shift, and go to state 5
    FUNCTION  shift, and go to state 6

    stmlist    go to state 72
    stm        go to state 9
    varlist    go to state 10
    decl       go to state 11
    func_decl  go to state 12
    expr       go to state 13


State 71

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON type LCBRACKET stmlist • RCBRACKET

    RCBRACKET  shift, and go to state 73


State 72

   10 stm: IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist • RCBRACKET

    RCBRACKET  shift, and go to state 74


State 73

   18 func_decl: FUNCTION ID LPAREN param_list RPAREN COLON type LCBRACKET stmlist RCBRACKET •

    $default  reduce using rule 18 (func_decl)


State 74

   10 stm: IF LPAREN expr RPAREN LCBRACKET stmlist RCBRACKET ELSE LCBRACKET stmlist RCBRACKET •

    $default  reduce using rule 10 (stm)
